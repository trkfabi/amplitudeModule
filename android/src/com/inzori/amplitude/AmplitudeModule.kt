/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package com.inzori.amplitude

import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.common.Log
import org.appcelerator.kroll.common.TiConfig
import org.appcelerator.titanium.TiApplication

import com.amplitude.core.events.Identify
import com.amplitude.android.Amplitude
import com.amplitude.android.Configuration

@Kroll.module(name = "Amplitude", id = "com.inzori.amplitude")
class AmplitudeModule: KrollModule() {
	companion object {
		// Standard Debugging variables
		private const val LCAT = "AmplitudeModule"
		private val DBG = TiConfig.LOGD
		
		// You can define constants with @Kroll.constant, for example:
		// @Kroll.constant private val EXTERNAL_NAME = "EXTERNAL_NAME"

		@Kroll.onAppCreate
		fun onAppCreate(app: TiApplication?) {
			Log.d(LCAT, "inside onAppCreate")
			// put module init code that needs to run when the application is created
		}
	}

	private var amplitude: Amplitude? = null
	private var doLog: Boolean = false
	// Methods

	@Kroll.method
	fun initialize(params: KrollDict) {
		
		val apiKey = params.getString("apiKey")
		doLog = params.optBoolean("doLog", false)

		if (apiKey.isNullOrEmpty()) {
			Log.e(LCAT, "API key is required")
			return
		}
		
		if (doLog) Log.w(LCAT, "initialize() apiKey: $apiKey")

		amplitude = Amplitude(
			Configuration(
				apiKey = apiKey,
				context = TiApplication.getInstance().getApplicationContext()
			)
		)
	}
	@Kroll.method
	fun logUserId(params: KrollDict) {
		val userId = params.optString("userId", "")
		if (doLog) Log.w(LCAT, "setUserId() userId: $userId")

		amplitude?.setUserId(userId)
	}
	@Kroll.method
	fun logDeviceId(params: KrollDict) {
		val deviceId = params.optString("deviceId", "")
		if (doLog) Log.w(LCAT, "setDeviceId() deviceId: $deviceId")
		amplitude?.setDeviceId(deviceId)

	}
	@Kroll.method
	fun logUserProperties(params: KrollDict) {

		val props = params.getKrollDict("props")
		if (doLog) Log.w(LCAT, "setUserProperties() props: $props")
		val identify = Identify()
		props?.forEach { (key, value) -> identify.set(key, value) }
		amplitude?.identify(identify)

	}
	@Kroll.method
	fun logEvent(params: KrollDict) {
		val eventType = params.optString("eventType", "")
		val props = params.getKrollDict("props")
		if (doLog) Log.w(LCAT, "logEvent() type: $eventType props: $props")

		amplitude?.track(eventType, props)
	}

	@Kroll.method
	fun reset() {
		// shortcut to set userId and deviceId to null
		if (doLog) Log.w(LCAT, "reset()")
		amplitude?.reset()
	}
}
