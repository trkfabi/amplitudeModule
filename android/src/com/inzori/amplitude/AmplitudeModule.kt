/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package com.inzori.amplitude

import androidx.lifecycle.MutableLiveData
import com.amplitude.android.Amplitude
import com.amplitude.android.Configuration
import com.amplitude.core.events.Identify
import com.amplitude.experiment.Experiment
import com.amplitude.experiment.ExperimentClient
import com.amplitude.experiment.ExperimentConfig
import com.amplitude.experiment.ExperimentUser.Companion.builder
import com.amplitude.experiment.Variant
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.common.Log
import org.appcelerator.kroll.common.TiConfig
import org.appcelerator.titanium.TiApplication
import org.json.JSONObject


@Kroll.module(name = "Amplitude", id = "com.inzori.amplitude")
class AmplitudeModule: KrollModule() {
	companion object {
		// Standard Debugging variables
		private const val LCAT = "AmplitudeModule"
		private val DBG = TiConfig.LOGD

		// You can define constants with @Kroll.constant, for example:
		// @Kroll.constant private val EXTERNAL_NAME = "EXTERNAL_NAME"

		@Kroll.onAppCreate
		fun onAppCreate(app: TiApplication?) {
			Log.d(LCAT, "inside onAppCreate")
			// put module init code that needs to run when the application is created
		}
	}

	private var amplitude: Amplitude? = null
	private var doLog: Boolean = false
	private var client: ExperimentClient? = null
	private val mVariant: MutableLiveData<Variant>? = null

	// Methods

	@Kroll.method
	fun initialize(params: KrollDict) {
		
		val apiKey = params.getString("apiKey")
		var experimentApiKey = params.getString("experimentApiKey")
		doLog = params.optBoolean("doLog", false)

		if (apiKey.isNullOrEmpty()) {
			Log.e(LCAT, "API key is required")
			return
		}
		
		if (doLog) Log.w(LCAT, "initialize() apiKey: $apiKey")

		amplitude = Amplitude(
			Configuration(
				apiKey = apiKey,
				context = TiApplication.getInstance().getApplicationContext()
			)
		)

		if (experimentApiKey.isNullOrEmpty()) {
			Log.e(LCAT, "experimentApiKey is required to initialize Experiments")
			return
		}

		// (1) Initialize the experiment client
		//val config = ExperimentConfig()
		val config = ExperimentConfig.builder()
			.debug(doLog)
			.build()
		client = Experiment.initializeWithAmplitudeAnalytics(TiApplication.getInstance(), experimentApiKey, config)

		if (doLog) Log.w(LCAT, "Experiment initialize() client: ${client.toString()}")
	}

	@Kroll.method
	fun logUserId(params: KrollDict) {
		val userId = params.optString("userId", "")
		if (doLog) Log.w(LCAT, "setUserId() userId: $userId")

		amplitude?.setUserId(userId)

		// (2) Fetch variants for a user
		// we don't need the user as we're integrating with analytics
//		val user = builder()
//			.userId(userId)
//			.build()
		try {
			client!!.fetch().get()
			if (doLog) Log.w(LCAT, "Experiment fetch() client")

			var obj = arrayOfNulls<Any>(client!!.all().toList().size)
			client!!.all().forEach { entry ->
				if (doLog) Log.w(LCAT, "${entry.key} : ${entry.value.value}")

				val model = KrollDict()
				model["key"] = entry.key
				model["value"] = entry.value.value

				obj += model
			}


			// fire event back to Ti app
			val props = KrollDict()
			props["success"] = true
			props["list"] = obj
			fireEvent("fluid:fetchedVariants", props)


		} catch (e: Exception) {
			e.printStackTrace()
			if (doLog) Log.w(LCAT, "Experiment fetch() error: ${e.printStackTrace()}")
		}
	}
	@Kroll.method
	fun clearExperiment(params: KrollDict) {
		client!!.clear()
	}

	@Kroll.method
	fun lookUpVariant(params: KrollDict): String? {

		val flag = params.optString("flag", "")
		// (3) Lookup a flag's variant
		val variant = client!!.variant(flag)

		if (doLog) Log.w(LCAT, "lookUpVariant() flag $flag - value: ${variant.value}")

		client!!.exposure(flag)

		// fire event back to Ti app
		val props = KrollDict()
		props["success"] = true
		props["key"] = flag
		props["value"] = variant?.value
		fireEvent("fluid:lookUpVariant", props)

		return variant?.value

	}

	@Kroll.method
	fun lookUpFlag(params: KrollDict): KrollDict {

		val flag = params.optString("flag", "")
		// (3) Lookup a flag's variant
		val variant = client!!.variant(flag)

		if (doLog) Log.w(LCAT, "lookUpFlag() flag $flag: $variant")

		client!!.exposure(flag)

		// fire event back to Ti app
		val props = KrollDict()
		props["success"] = true
		props["key"] = flag
		props["value"] = variant?.value
		var value = JSONObject()

		try {
			value = (variant?.payload as JSONObject)
		} catch (e: Exception) {

		}
		props["payload"] = value.toString()

		fireEvent("fluid:lookUpVariant", props)
		return props

	}

	@Kroll.method
	fun logDeviceId(params: KrollDict) {
		val deviceId = params.optString("deviceId", "")
		if (doLog) Log.w(LCAT, "setDeviceId() deviceId: $deviceId")
		amplitude?.setDeviceId(deviceId)

	}
	@Kroll.method
	fun logUserProperties(params: KrollDict) {

		val props = params.getKrollDict("props")
		if (doLog) Log.w(LCAT, "setUserProperties() props: $props")
		val identify = Identify()
		props?.forEach { (key, value) -> identify.set(key, value) }
		amplitude?.identify(identify)

	}
	@Kroll.method
	fun logEvent(params: KrollDict) {
		val eventType = params.optString("eventType", "")
		val props = params.getKrollDict("props")
		if (doLog) Log.w(LCAT, "logEvent() type: $eventType props: $props")

		amplitude?.track(eventType, props)
	}

	@Kroll.method
	fun reset() {
		// shortcut to set userId and deviceId to null
		if (doLog) Log.w(LCAT, "reset()")
		amplitude?.reset()
	}
}
