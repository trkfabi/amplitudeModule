/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

package com.inzori.amplitude

import org.appcelerator.kroll.KrollModule
import org.appcelerator.kroll.KrollDict
import org.appcelerator.kroll.annotations.Kroll
import org.appcelerator.kroll.common.Log
import org.appcelerator.kroll.common.TiConfig
import org.appcelerator.titanium.TiApplication

import com.amplitude.core.events.Identify
import com.amplitude.android.Amplitude
import com.amplitude.android.Configuration

@Kroll.module(name = "Amplitude", id = "com.inzori.amplitude")
class AmplitudeModule: KrollModule() {

	// NOTE: You can develop Titanium Android modules in Android Studio. Follow these three steps:
	//   1. Build the empty module
	//   2. Drag the "build" folder into Android Studio
	//   3. Start developing! All dependencies and code completions are supported!

	companion object {
		// Standard Debugging variables
		private const val LCAT = "AmplitudeModule"
		private val DBG = TiConfig.LOGD
		
		// You can define constants with @Kroll.constant, for example:
		// @Kroll.constant private val EXTERNAL_NAME = "EXTERNAL_NAME"

		@Kroll.onAppCreate
		fun onAppCreate(app: TiApplication?) {
			Log.d(LCAT, "inside onAppCreate")
			// put module init code that needs to run when the application is created
		}
	}

	private var amplitude: Amplitude? = null
	// Methods

	@Kroll.method
	fun initialize(params: KrollDict) {
		Log.w(LCAT, "initialize() called")
		val apiKey = params.getString("apiKey")
		amplitude = Amplitude(
			Configuration(
				apiKey = apiKey,
				context = TiApplication.getInstance().getApplicationContext()
			)
		)
	}
	@Kroll.method
	fun setUserId(params: KrollDict) {
		Log.w(LCAT, "setUserId() called")
		val userId = params.getString("userId")
		amplitude?.setUserId(userId)
	}
	@Kroll.method
	fun setDeviceId(params: KrollDict) {
		Log.w(LCAT, "setDeviceId() called")
		val deviceId = params.getString("deviceId")
		amplitude?.setDeviceId(deviceId)
	}
	@Kroll.method
	fun setUserProperties(params: KrollDict) {
		Log.w(LCAT, "setDeviceId() called")
		val props = params.getKrollDict("props")
		val identify = Identify()
		props?.forEach { (key, value) -> identify.set(key, value) }
		amplitude?.identify(identify)
	}
	@Kroll.method
	fun logEvent(params: KrollDict) {
		Log.w(LCAT, "logEvent() called")

		val eventType = params.optString("eventType", "")
		val props = params["props"] as? KrollDict
		Log.w(LCAT, "logEvent() type: $eventType")

		val event = convertKrollDictToMutableMap(props)
		//val event = mapOf("eventType" to eventType, "eventProperties" to props)
		amplitude?.track(eventType, event)
	}
	private fun convertKrollDictToMutableMap(krollDict: KrollDict?): MutableMap<String, Any?> {
		if (krollDict != null) {
			return krollDict.toMutableMap()
		}
		return mutableMapOf()
	}


	@Kroll.method
	fun example(): String {
		Log.d(LCAT, "example() called")
		return "hello world"
	}
	
	@Kroll.method
	fun testMethod(params: KrollDict) {
		Log.d(LCAT, "testMethod() called")

		// Access the parameters passed as an Object, e.g. "myModule.testMethod({ name: 'John Doe', flag: true })"
		val name = params.getString("name")
		val flag = params.optBoolean("flag", false)

		// Fire an event that can be added via "myModule.addEventListener('shown', ...)"
		val event = KrollDict()
		event["name"] = name
		event["flag"] = flag

		fireEvent("", event)
	}

	// Properties

	@get:Kroll.getProperty
	@set:Kroll.setProperty
	var exampleProp: String
		get() {
			Log.d(LCAT, "get example property")
			return "hello world"
		}
		set(value) {
			Log.d(LCAT, "set example property: $value")
		}
}
